# -*- coding: utf-8 -*-
"""
Created on Wed Jan 30 03:31:08 2019

@author: Андрей
"""

import numpy as np
import matplotlib.pyplot as plt
import math


def calc_var(arr, summ):
    ans = 0
    mean = summ / len(arr)
    for i in range(len(arr)):
        ans += (arr[i] - mean) ** 2

    return ans / len(arr)


def calc_var1(arr, summ):
    ans = 0
    mean = summ / len(arr)
    for i in range(len(arr)):
        ans += (arr[i] - mean) ** 2

    return ans / (len(arr) - 1)


def lmean(summ, arr, i):
    exclude = summ - arr[i]
    return exclude / (len(arr) - 1)


def calc_lool_var1(arr, summ):
    ans = 0
    mean = summ / len(arr)
    for i in range(len(arr)):
        ans += (arr[i] - lmean(summ, arr, i)) ** 2

    n = len(arr)

    return (1 / float(n)) * ans
    # return (1 / (n + 1)) * ans


def f1():
    prob = [0.07713694786541866, 0.07640774353711219, 0.07592721062099812, 0.07553946997189892, 0.07528247650267934]
    mixed = [0.07714095278887487, 0.07649376209602284, 0.075938948166447, 0.07552244363851512, 0.07530978536051784]
    med = [0.07718982741945643, 0.07651430863621836, 0.07597537974333111, 0.07552555335810258, 0.07527325976987445]
    x = [0, 1, 2, 3, 4]
    plt.plot(x, prob, label="prob")
    #plt.plot(x, mixed, label="mixed")
    plt.plot(x, med, label="median")
    plt.legend()
    plt.savefig("1.png")
    plt.show()

def f2():
    prob = [0.07713694786541866 - 0.075, 0.07640774353711219 - 0.075, 0.07592721062099812 - 0.075, 0.07553946997189892 - 0.075, 0.07528247650267934 - 0.075]
    mixed = [0.07714095278887487 - 0.075, 0.07649376209602284 - 0.075, 0.075938948166447 - 0.075, 0.07552244363851512 - 0.075, 0.07530978536051784 - 0.075]
    med = [0.07718982741945643 - 0.075, 0.07651430863621836 - 0.075, 0.07597537974333111 - 0.075, 0.07552555335810258 - 0.075, 0.07527325976987445 - 0.075]
    x = [0, 1, 2, 3, 4]
    plt.plot(x, prob, label="prob")
    plt.plot(x, mixed, label="mixed")
    plt.plot(x, med, label="median")
    plt.legend()
    plt.savefig("2.png")
    plt.show()


def f3():
    prob = [0.07713694786541866, 0.07640774353711219, 0.07592721062099812, 0.07553946997189892, 0.07528247650267934]
    mixed = [0.07714095278887487, 0.07649376209602284, 0.075938948166447, 0.07552244363851512, 0.07530978536051784]
    med = [0.07718982741945643, 0.07651430863621836, 0.07597537974333111, 0.07552555335810258, 0.07527325976987445]
    x = [0, 1, 2, 3, 4]
    prob = list(map(lambda x: math.log(x), prob))
    mixed = list(map(lambda x: math.log(x), mixed))
    med = list(map(lambda x: math.log(x), med))
    plt.plot(x, prob, label="prob")
    plt.plot(x, mixed, label="mixed")
    plt.plot(x, med, label="median")
    plt.legend()
    plt.savefig("3.png")
    plt.show()

def f4():
    median = [12, 18, 13, 14, 26, 27, 4, 5, 33, 7, 21, 14, 23, 17, 7, 34, 4, 7, 10, 4, 6, 6, 6, 13, 23, 21, 14, 17, 12, 34, 8, 16, 1, 6, 7, 18, 6, 9, 25, 3, 16, 17, 4, 10, 36, 12, 34, 12, 13, 29, 29, 12, 21, 20, 29, 13, 19, 12, 16, 13, 28, 20, 28, 4, 14, 23, 12, 5, 7, 30, 28, 11, 19, 18, 9, 8, 28, 9, 20, 11, 26, 11, 22, 5, 14, 10, 19, 12, 22, 21, 18, 13, 19, 25, 77, 41, 20, 29, 93, 105, 71, 35, 120, 37, 87, 17, 14, 30, 27, 41, 28, 11, 7, 12, 11, 18, 17, 24, 27, 11, 13, 12, 15, 12, 12, 28, 20, 13, 43, 7, 20, 20, 32, 22, 28, 12, 18, 38, 30, 22, 26, 36, 24, 27, 48, 24, 22, 8, 49, 42, 34, 11, 24, 8, 13, 17, 22, 20, 17, 11, 30, 16, 35, 49, 42, 35, 19, 11, 10, 22, 12, 4, 6, 2, 28, 17, 12, 11, 9, 36, 10, 27, 18, 9, 11, 9, 12, 17, 16, 18, 17, 6, 14, 18, 26, 13, 10, 27, 20, 14, 8, 36, 100, 48, 46, 19, 48, 11, 27, 141, 18, 29, 16, 11, 42, 71, 28, 15, 25, 108, 18, 22, 11, 55, 49, 24, 13, 42, 37, 18, 20, 2, 25, 115, 152, 15, 15, 24, 6, 27, 24, 14, 14, 31, 27, 10, 21, 17, 17, 13, 10, 31, 45, 22, 21, 15, 18, 14, 11, 20, 23, 13, 18, 25, 47, 9, 38, 46, 6, 5, 1, 2, 2, 2, 3, 4, 12, 4, 15, 5, 32, 8, 2, 14, 9, 8, 3, 5, 2, 9, 11, 32, 23, 18, 21, 3, 6, 9, 17, 16, 13, 15, 9, 20, 7, 11, 6, 20, 31, 20, 6, 2, 8, 2, 4, 7, 11, 5, 14, 53, 13, 17, 17, 11, 26, 19, 44, 26, 29, 22, 55, 127, 154, 6, 6, 30, 8, 3, 10, 7, 3, 2, 11, 10, 8, 2, 2, 2, 23, 5, 2, 1, 3, 1, 5, 3, 2, 4, 3, 1, 5, 2, 2, 3, 3, 7, 10, 10, 12, 19, 6, 11, 15, 3, 10, 18, 13, 12, 3, 2, 4, 7, 9, 14, 14, 6, 8, 11, 17, 15, 11, 24, 8, 2, 4, 20, 1, 10, 21, 34, 12, 21, 56, 34, 42, 31, 32, 28, 27, 20, 14, 15, 4, 4, 3, 6, 9, 9, 7, 10, 11, 10, 18, 44, 54, 13, 23, 29, 24, 33, 36, 24, 8, 22, 11, 32, 12, 10, 11, 61, 26, 12, 8, 22, 15, 13, 18, 11, 12, 4, 9, 10, 7, 3, 3, 9, 5, 21, 28, 19, 48, 35, 29, 8, 83, 5, 19, 3, 11, 10, 72, 14, 8, 16, 15, 50, 29, 63, 23, 12, 3, 14, 14, 85, 11, 7, 19, 30, 24, 38, 55, 54, 3, 10, 27, 10, 29, 17, 30, 35, 12, 18, 23, 12, 15, 22, 9, 42, 15, 23, 30, 21, 26, 12, 36, 21, 22, 13, 22, 16, 7, 12, 4, 9, 8, 8, 21, 9, 7, 5, 7, 14, 13, 10, 6, 12, 4, 16, 5, 17, 15, 10, 26, 21, 22, 13, 19, 9, 21, 29, 18, 25, 29, 15, 2, 11, 37, 14, 20, 16, 5, 6, 11, 23, 11, 15, 8, 6, 7, 5, 24, 11, 3, 3, 3, 7, 5, 3, 16, 13, 19, 8, 5, 4, 7, 12, 3, 4, 20, 14, 10, 16, 5, 7, 8, 5, 28, 18, 6, 16, 13, 13, 11, 14, 17, 33, 12, 3, 11, 15, 14, 24, 19, 8, 20, 19, 13, 8, 11, 98]
    #print(len(median[0:5]))
    #median = median[:20]
    median = sorted(median,reverse=True)
    a = []
    for i in range(len(median)):
        val = median[i]
        for _ in range(val):
            a.append(i + 1)

    #print(a)
    print(len(median))
    #a = [1, 2, 2, 3, 4]
    #median = median[:2]
    plt.hist(a, bins=len(median), rwidth=0.7)
    plt.savefig("h.png")
    plt.show()

def f5():
    prob = [7, 24, 15, 17, 23, 26, 5, 32, 17, 14, 5, 9, 22, 19, 8, 28, 8, 10, 12, 4, 4, 7, 8, 11, 24, 14, 13, 13, 13, 30, 6, 17, 2, 9, 7, 19, 13, 28, 2, 8, 9, 16, 14, 41, 15, 22, 14, 15, 32, 18, 22, 13, 17, 20, 16, 13, 21, 18, 15, 11, 25, 15, 23, 5, 13, 13, 12, 6, 6, 33, 33, 19, 20, 14, 7, 10, 26, 19, 13, 15, 14, 6, 23, 20, 14, 9, 10, 10, 21, 23, 11, 9, 29, 19, 70, 37, 22, 29, 94, 96, 72, 39, 130, 30, 86, 17, 1, 22, 24, 35, 39, 26, 18, 7, 12, 10, 31, 7, 26, 16, 5, 16, 15, 13, 6, 11, 18, 30, 13, 45, 17, 19, 22, 23, 22, 29, 14, 15, 40, 34, 25, 27, 35, 24, 29, 61, 24, 20, 11, 53, 43, 37, 10, 30, 7, 18, 17, 22, 18, 20, 11, 27, 17, 36, 55, 36, 23, 29, 9, 10, 19, 8, 4, 5, 4, 2, 20, 12, 15, 12, 13, 29, 20, 27, 19, 13, 11, 11, 19, 12, 15, 8, 12, 15, 13, 14, 16, 8, 17, 26, 16, 21, 3, 29, 108, 44, 33, 23, 55, 9, 20, 146, 26, 34, 16, 41, 11, 74, 16, 16, 12, 123, 16, 31, 13, 40, 40, 28, 11, 42, 42, 11, 33, 1, 33, 101, 152, 17, 14, 23, 8, 23, 25, 12, 18, 30, 19, 11, 24, 26, 22, 15, 7, 30, 40, 26, 17, 17, 18, 20, 13, 18, 24, 15, 16, 38, 36, 8, 36, 41, 9, 5, 16, 23, 44, 11, 12, 7, 4, 9, 59, 16, 16, 31, 1, 6, 5, 13, 12, 11, 16, 13, 7, 11, 14, 9, 5, 13, 43, 11, 5, 3, 5, 6, 5, 7, 8, 3, 57, 15, 18, 19, 10, 20, 17, 43, 43, 27, 52, 138, 154, 4, 7, 26, 9, 4, 17, 5, 5, 7, 5, 11, 10, 6, 3, 4, 2, 23, 4, 1, 7, 2, 4, 2, 4, 2, 5, 4, 4, 6, 1, 6, 4, 9, 14, 10, 9, 29, 4, 9, 5, 12, 2, 9, 11, 11, 8, 4, 3, 7, 5, 4, 5, 17, 13, 9, 18, 18, 9, 8, 21, 12, 4, 3, 17, 5, 18, 19, 26, 18, 14, 51, 62, 20, 34, 21, 24, 18, 36, 11, 12, 9, 1, 3, 8, 5, 8, 8, 8, 6, 12, 18, 44, 55, 7, 29, 28, 21, 32, 42, 23, 13, 21, 12, 41, 9, 5, 9, 45, 43, 25, 16, 10, 20, 20, 13, 16, 10, 9, 4, 12, 9, 4, 4, 6, 5, 18, 28, 23, 36, 30, 31, 21, 73, 4, 15, 5, 13, 7, 56, 27, 7, 17, 10, 47, 37, 57, 13, 6, 11, 16, 77, 8, 15, 20, 27, 21, 42, 44, 35, 73, 1, 4, 29, 28, 11, 28, 27, 14, 26, 25, 8, 24, 15, 32, 9, 11, 19, 26, 19, 25, 8, 27, 25, 18, 13, 18, 13, 3, 9, 15, 7, 5, 5, 9, 24, 8, 3, 6, 7, 10, 17, 12, 10, 15, 19, 23, 11, 7, 13, 17, 19, 23, 20, 20, 7, 30, 30, 10, 24, 26, 20, 9, 2, 8, 59, 9, 10, 14, 15, 8, 6, 12, 23, 8, 18, 11, 3, 1, 5, 21, 16, 6, 8, 6, 12, 5, 10, 23, 12, 6, 3, 2, 5, 18, 2, 3, 23, 13, 13, 18, 7, 3, 3, 11, 4, 23, 16, 29, 14, 14, 12, 14, 22, 29, 7, 9, 6, 21, 23, 19, 17, 16, 18, 18, 12, 6, 18, 109]
    #print(len(median[0:5]))
    #median = median[:20]
    prob = sorted(prob,reverse=True)
    a = []
    for i in range(len(prob)):
        val = prob[i]
        for _ in range(val):
            a.append(i + 1)

    #print(a)
    print(len(prob))
    #a = [1, 2, 2, 3, 4]
    #median = median[:2]
    plt.hist(a, bins=len(prob), rwidth=0.7)
    plt.savefig("hh.png")
    plt.show()

def f6():
    prob = [7, 24, 15, 17, 23, 26, 5, 32, 17, 14, 5, 9, 22, 19, 8, 28, 8, 10, 12, 4, 4, 7, 8, 11, 24, 14, 13, 13, 13,
            30, 6, 17, 2, 9, 7, 19, 13, 28, 2, 8, 9, 16, 14, 41, 15, 22, 14, 15, 32, 18, 22, 13, 17, 20, 16, 13, 21, 18,
            15, 11, 25, 15, 23, 5, 13, 13, 12, 6, 6, 33, 33, 19, 20, 14, 7, 10, 26, 19, 13, 15, 14, 6, 23, 20, 14, 9,
            10, 10, 21, 23, 11, 9, 29, 19, 70, 37, 22, 29, 94, 96, 72, 39, 130, 30, 86, 17, 1, 22, 24, 35, 39, 26, 18,
            7, 12, 10, 31, 7, 26, 16, 5, 16, 15, 13, 6, 11, 18, 30, 13, 45, 17, 19, 22, 23, 22, 29, 14, 15, 40, 34, 25,
            27, 35, 24, 29, 61, 24, 20, 11, 53, 43, 37, 10, 30, 7, 18, 17, 22, 18, 20, 11, 27, 17, 36, 55, 36, 23, 29,
            9, 10, 19, 8, 4, 5, 4, 2, 20, 12, 15, 12, 13, 29, 20, 27, 19, 13, 11, 11, 19, 12, 15, 8, 12, 15, 13, 14, 16,
            8, 17, 26, 16, 21, 3, 29, 108, 44, 33, 23, 55, 9, 20, 146, 26, 34, 16, 41, 11, 74, 16, 16, 12, 123, 16, 31,
            13, 40, 40, 28, 11, 42, 42, 11, 33, 1, 33, 101, 152, 17, 14, 23, 8, 23, 25, 12, 18, 30, 19, 11, 24, 26, 22,
            15, 7, 30, 40, 26, 17, 17, 18, 20, 13, 18, 24, 15, 16, 38, 36, 8, 36, 41, 9, 5, 16, 23, 44, 11, 12, 7, 4, 9,
            59, 16, 16, 31, 1, 6, 5, 13, 12, 11, 16, 13, 7, 11, 14, 9, 5, 13, 43, 11, 5, 3, 5, 6, 5, 7, 8, 3, 57, 15,
            18, 19, 10, 20, 17, 43, 43, 27, 52, 138, 154, 4, 7, 26, 9, 4, 17, 5, 5, 7, 5, 11, 10, 6, 3, 4, 2, 23, 4, 1,
            7, 2, 4, 2, 4, 2, 5, 4, 4, 6, 1, 6, 4, 9, 14, 10, 9, 29, 4, 9, 5, 12, 2, 9, 11, 11, 8, 4, 3, 7, 5, 4, 5, 17,
            13, 9, 18, 18, 9, 8, 21, 12, 4, 3, 17, 5, 18, 19, 26, 18, 14, 51, 62, 20, 34, 21, 24, 18, 36, 11, 12, 9, 1,
            3, 8, 5, 8, 8, 8, 6, 12, 18, 44, 55, 7, 29, 28, 21, 32, 42, 23, 13, 21, 12, 41, 9, 5, 9, 45, 43, 25, 16, 10,
            20, 20, 13, 16, 10, 9, 4, 12, 9, 4, 4, 6, 5, 18, 28, 23, 36, 30, 31, 21, 73, 4, 15, 5, 13, 7, 56, 27, 7, 17,
            10, 47, 37, 57, 13, 6, 11, 16, 77, 8, 15, 20, 27, 21, 42, 44, 35, 73, 1, 4, 29, 28, 11, 28, 27, 14, 26, 25,
            8, 24, 15, 32, 9, 11, 19, 26, 19, 25, 8, 27, 25, 18, 13, 18, 13, 3, 9, 15, 7, 5, 5, 9, 24, 8, 3, 6, 7, 10,
            17, 12, 10, 15, 19, 23, 11, 7, 13, 17, 19, 23, 20, 20, 7, 30, 30, 10, 24, 26, 20, 9, 2, 8, 59, 9, 10, 14,
            15, 8, 6, 12, 23, 8, 18, 11, 3, 1, 5, 21, 16, 6, 8, 6, 12, 5, 10, 23, 12, 6, 3, 2, 5, 18, 2, 3, 23, 13, 13,
            18, 7, 3, 3, 11, 4, 23, 16, 29, 14, 14, 12, 14, 22, 29, 7, 9, 6, 21, 23, 19, 17, 16, 18, 18, 12, 6, 18, 109]
    median = [12, 18, 13, 14, 26, 27, 4, 5, 33, 7, 21, 14, 23, 17, 7, 34, 4, 7, 10, 4, 6, 6, 6, 13, 23, 21, 14, 17, 12,
              34, 8, 16, 1, 6, 7, 18, 6, 9, 25, 3, 16, 17, 4, 10, 36, 12, 34, 12, 13, 29, 29, 12, 21, 20, 29, 13, 19,
              12, 16, 13, 28, 20, 28, 4, 14, 23, 12, 5, 7, 30, 28, 11, 19, 18, 9, 8, 28, 9, 20, 11, 26, 11, 22, 5, 14,
              10, 19, 12, 22, 21, 18, 13, 19, 25, 77, 41, 20, 29, 93, 105, 71, 35, 120, 37, 87, 17, 14, 30, 27, 41, 28,
              11, 7, 12, 11, 18, 17, 24, 27, 11, 13, 12, 15, 12, 12, 28, 20, 13, 43, 7, 20, 20, 32, 22, 28, 12, 18, 38,
              30, 22, 26, 36, 24, 27, 48, 24, 22, 8, 49, 42, 34, 11, 24, 8, 13, 17, 22, 20, 17, 11, 30, 16, 35, 49, 42,
              35, 19, 11, 10, 22, 12, 4, 6, 2, 28, 17, 12, 11, 9, 36, 10, 27, 18, 9, 11, 9, 12, 17, 16, 18, 17, 6, 14,
              18, 26, 13, 10, 27, 20, 14, 8, 36, 100, 48, 46, 19, 48, 11, 27, 141, 18, 29, 16, 11, 42, 71, 28, 15, 25,
              108, 18, 22, 11, 55, 49, 24, 13, 42, 37, 18, 20, 2, 25, 115, 152, 15, 15, 24, 6, 27, 24, 14, 14, 31, 27,
              10, 21, 17, 17, 13, 10, 31, 45, 22, 21, 15, 18, 14, 11, 20, 23, 13, 18, 25, 47, 9, 38, 46, 6, 5, 1, 2, 2,
              2, 3, 4, 12, 4, 15, 5, 32, 8, 2, 14, 9, 8, 3, 5, 2, 9, 11, 32, 23, 18, 21, 3, 6, 9, 17, 16, 13, 15, 9, 20,
              7, 11, 6, 20, 31, 20, 6, 2, 8, 2, 4, 7, 11, 5, 14, 53, 13, 17, 17, 11, 26, 19, 44, 26, 29, 22, 55, 127,
              154, 6, 6, 30, 8, 3, 10, 7, 3, 2, 11, 10, 8, 2, 2, 2, 23, 5, 2, 1, 3, 1, 5, 3, 2, 4, 3, 1, 5, 2, 2, 3, 3,
              7, 10, 10, 12, 19, 6, 11, 15, 3, 10, 18, 13, 12, 3, 2, 4, 7, 9, 14, 14, 6, 8, 11, 17, 15, 11, 24, 8, 2, 4,
              20, 1, 10, 21, 34, 12, 21, 56, 34, 42, 31, 32, 28, 27, 20, 14, 15, 4, 4, 3, 6, 9, 9, 7, 10, 11, 10, 18,
              44, 54, 13, 23, 29, 24, 33, 36, 24, 8, 22, 11, 32, 12, 10, 11, 61, 26, 12, 8, 22, 15, 13, 18, 11, 12, 4,
              9, 10, 7, 3, 3, 9, 5, 21, 28, 19, 48, 35, 29, 8, 83, 5, 19, 3, 11, 10, 72, 14, 8, 16, 15, 50, 29, 63, 23,
              12, 3, 14, 14, 85, 11, 7, 19, 30, 24, 38, 55, 54, 3, 10, 27, 10, 29, 17, 30, 35, 12, 18, 23, 12, 15, 22,
              9, 42, 15, 23, 30, 21, 26, 12, 36, 21, 22, 13, 22, 16, 7, 12, 4, 9, 8, 8, 21, 9, 7, 5, 7, 14, 13, 10, 6,
              12, 4, 16, 5, 17, 15, 10, 26, 21, 22, 13, 19, 9, 21, 29, 18, 25, 29, 15, 2, 11, 37, 14, 20, 16, 5, 6, 11,
              23, 11, 15, 8, 6, 7, 5, 24, 11, 3, 3, 3, 7, 5, 3, 16, 13, 19, 8, 5, 4, 7, 12, 3, 4, 20, 14, 10, 16, 5, 7,
              8, 5, 28, 18, 6, 16, 13, 13, 11, 14, 17, 33, 12, 3, 11, 15, 14, 24, 19, 8, 20, 19, 13, 8, 11, 98]
    x=range(620)
    prob = sorted(prob, reverse=True)
    median = sorted(median, reverse=True)
    print (len(median))
    for _ in range(len(median) - len(prob)):
        prob.append(0)

    plt.plot(x, prob, label="prob")
    plt.plot(x, median, label="median")
    plt.legend()
    plt.savefig("hhh.png")
    plt.show()

def f7():
    mf = [[589, 776, 1161, 1550, 1941, 2332, 2719, 2917, 3114, 3504, 3892, 4280, 4671, 5062, 5449, 5837, 6231, 6618, 7011, 7399, 7790, 8181, 8568, 8958, 9348, 9737, 10127, 10516, 10906, 11295, 11685, 12075],
    [895, 1223, 1555, 1943, 2139, 2336, 2725, 3113, 3502, 3891, 4086, 4282, 4672, 5062, 5451, 5841, 6232, 6620, 7011, 7400, 7789, 8178, 8568, 8957, 9348, 9737, 10127, 10516, 10906, 11295, 11685, 12075],
    [7622, 7769, 7917, 8071, 8222, 8372, 8527, 8681, 8832, 8984, 9136, 9285, 9437, 9588, 9741, 9892, 10044, 10195, 10347, 10498, 10649, 10799, 10951, 11102, 11254, 11405, 11556, 11707, 11859, 12010, 12162, 12313],
    [745],
    [1945],
    [9248],
    [8417],
    [10365],
    [10768],
    [7348],
    [12396],
    [11142],
    [12329],
    [12096],
    [1095, 1508, 1870, 2261, 2649, 3063, 3311, 3561, 3949, 4274, 4718, 5044, 5225, 5554, 5870, 6223, 6693, 7019, 7308, 7491, 7801, 8116, 8543, 8947, 9348, 9689, 10097, 10481, 10922, 11311, 11681, 12076],
    [384, 755, 1052, 1500, 1770, 2243, 2534, 2907, 3126, 3555, 3812, 4240, 4695, 4918, 5372, 5802, 6203, 6558, 6915, 7242, 7755, 8060, 8500, 8852, 9305, 9690, 10068, 10495, 10886, 11278, 11675, 12071],
    [891, 1227, 1560, 1750, 1957, 2343, 2734, 3111, 3501, 3886, 4274, 4662, 5043, 5437, 5832, 6034, 6231, 6620, 7007, 7399, 7789, 8180, 8567, 8958, 9348, 9735, 10127, 10517, 10906, 11295, 11685, 12075],
    [387, 774, 1160, 1545, 1937, 2329, 2720, 3126, 3517, 3895, 4288, 4684, 4887, 5097, 5467, 5864, 6253, 6657, 7041, 7437, 7829, 8221, 8596, 8979, 9367, 9768, 10159, 10539, 10925, 11308, 11695, 12077],
    [8846],
    [10174],
    [2864, 3115, 3476, 3854, 4243, 4622, 4975, 5191, 5518, 5927, 6289, 6482, 6694, 7046, 7243, 7488, 7856, 8207, 8572, 8818, 8993, 9371, 9580, 9782, 10138, 10522, 10707, 10921, 11319, 11696, 12062, 12267],
    [],
    [1365],
    [11281, 11293, 11294, 11296, 11300, 11314, 11316, 11319, 11321, 11324, 11326, 11328, 11329, 11341, 11360, 11395, 11396, 11406, 11424, 11437, 11438, 11458, 11459, 11487, 11490, 11491, 11603, 11793, 11802, 12457, 12458],
    [389, 779, 1168, 1558, 1947, 2337, 2726, 3116, 3505, 3895, 4284, 4674, 5063, 5452, 5842, 6232, 6619, 6815, 7011, 7400, 7790, 8179, 8569, 8959, 9349, 9738, 10128, 10517, 10907, 11296, 11686, 12075],
    [12358, 12364, 12376],
    [788],
    [9976],
    [10784],
    [],
    [],
    [7556, 7649, 8858, 9646, 10182, 10243, 10629, 10674, 10804, 10907, 10985, 11109, 11174, 11214, 11276, 11331, 11387, 11425, 11470, 11533, 11612, 11691, 11760, 11832, 11899, 11969, 12039, 12110, 12182, 12251, 12322, 12393],
    [11264],
    [10228, 10297, 10367, 10437, 10507, 10575, 10646, 10716, 10787, 10854, 10921, 10988, 11055, 11091, 11128, 11201, 11246, 11318, 11348, 11417, 11557, 11617, 11654, 11692, 11734, 12036, 12089, 12143, 12251, 12292, 12358, 12410],
    [],
    [172, 345, 518, 691, 7239, 7402, 7565, 7728, 7892, 8055, 8219, 8382, 8546, 8709, 8872, 9035, 9198, 9363, 9529, 9690, 9851, 10021, 10203, 10389, 10550, 10711, 10898, 11248, 11540, 11823, 11980, 12160],
    [6548],
    [8005, 8818, 9218, 9504, 9675, 9805, 9890, 10054, 10230, 10316, 10424, 10602, 10694, 10804, 10897, 10984, 11080, 11165, 11262, 11349, 11443, 11539, 11632, 11723, 11815, 11907, 12000, 12093, 12186, 12278, 12370],
    [5167, 5428, 5705, 5980, 6236, 6525, 6773, 7015, 7351, 7561, 7821, 8052, 8238, 8571, 8759, 8962, 9154, 9339, 9514, 9722, 9929, 10114, 10302, 10507, 10720, 10905, 11110, 11281, 11474, 11699, 11901, 12090],
    [1224, 1556, 1943, 2139, 2335, 2724, 3115, 3504, 3894, 4284, 4673, 4869, 5064, 5451, 5841, 6232, 6621, 7010, 7399, 7789, 8178, 8568, 8958, 9348, 9737, 10126, 10516, 10906, 11296, 11686, 12075],
    [],
    [],
    [],
    [],
    [],
    [],
    [779, 1168, 1558, 1948, 2338, 2728, 3119, 3508, 3897, 4286, 4675, 5060, 5446, 5642, 5839, 6035, 6232, 6620, 7011, 7400, 7790, 8179, 8569, 8958, 9348, 9739, 10131, 10517, 10906, 11295, 11685, 12075],
    [7550, 7681, 7812, 7942, 8072, 9794, 9900, 10007, 10071, 10480, 10603, 10814, 10891, 11011, 11063, 11149, 11236, 11326, 11395, 11472, 11550, 11614, 11700, 11774, 11850, 11926, 12003, 12080, 12157, 12234, 12311, 12388],
    [607, 777, 1165, 1554, 1941, 2329, 2719, 3108, 3496, 3881, 4274, 4471, 4668, 5053, 5445, 5837, 6229, 6618, 7007, 7396, 7786, 8176, 8570, 8958, 9347, 9736, 10126, 10512, 10906, 11295, 11685, 12075],
    [2074]]

    pf = [[589, 769, 1172, 1566, 1936, 2340, 2727, 3128, 3520, 3892, 4298, 4668, 5078, 5439, 5823, 6231, 6635, 6998, 7399, 7775, 8161, 8542, 8954, 9348, 9736, 10119, 10508, 10886, 11101, 11311, 11677, 12078],
[895, 1233, 1591, 1964, 2352, 2738, 3126, 3529, 3910, 4293, 4505, 4701, 5102, 5491, 5885, 6269, 6659, 7030, 7430, 7827, 8215, 8595, 8987, 9374, 9747, 10134, 10529, 10917, 11301, 11674, 11885, 12088],
[7622, 7780, 7914, 8056, 8209, 8372, 8510, 8681, 8834, 8990, 9130, 9293, 9439, 9594, 9739, 9900, 10037, 10192, 10331, 10473, 10645, 10778, 10925, 11075, 11234, 11391, 11531, 11692, 11860, 12008, 12160, 12325],
[745],
[1945],
[9248],
[8417],
[10365],
[10768],
[7348],
[12396],
[11142],
[12329],
[12096],
[1095, 1508, 1870, 2261, 2649, 3063, 3311, 3561, 3949, 4274, 4718, 5044, 5382, 5554, 5870, 6223, 6693, 7019, 7308, 7491, 7801, 8116, 8543, 8947, 9348, 9689, 10097, 10481, 10922, 11311, 11681, 12063],
[384, 755, 1052, 1500, 1770, 2243, 2534, 2907, 3126, 3555, 3812, 4240, 4695, 4918, 5372, 5802, 6203, 6558, 6915, 7242, 7755, 8205, 8500, 8852, 9305, 9662, 10068, 10453, 10886, 11278, 11676, 12060],
[891, 1215, 1560, 1942, 2138, 2357, 2734, 3111, 3501, 3886, 4274, 4653, 5043, 5421, 5803, 6208, 6583, 6960, 7345, 7745, 8138, 8536, 8920, 9320, 9704, 10088, 10479, 10885, 11265, 11479, 11668, 12075],
[384, 774, 1160, 1545, 1940, 2317, 2697, 3116, 3503, 3880, 4280, 4662, 5047, 5467, 5885, 6253, 6659, 7055, 7445, 7829, 8177, 8388, 8595, 8974, 9370, 9757, 10120, 10525, 10942, 11304, 11700, 12077],
[8846],
[10174],
[2864, 3115, 3476, 3854, 4243, 4622, 4975, 5191, 5518, 5927, 6289, 6482, 6694, 7046, 7413, 7683, 7856, 8112, 8296, 8671, 8886, 9069, 9410, 9662, 9849, 10207, 10558, 10921, 11288, 11674, 12062, 12259],
[2864],
[1365],
[11281, 11300, 11314, 11326, 11341, 11360, 11395, 11406, 11424, 11438, 11458, 11491, 11603, 11793, 11802, 12457],
[392, 787, 1170, 1547, 1926, 2314, 2707, 2902, 3119, 3518, 3907, 4283, 4674, 5065, 5465, 5839, 6230, 6640, 7006, 7402, 7801, 8188, 8578, 8966, 9341, 9727, 10106, 10500, 10894, 11278, 11676, 12086],
[12358, 12376],
[788],
[9976],
[10784],
[],
[],
[7556, 7649, 8858, 9646, 10182, 10243, 10629, 10674, 10804, 10907, 10985, 11109, 11174, 11214, 11263, 11331, 11387, 11425, 11470, 11551, 11612, 11691, 11760, 11842, 11902, 11970, 12054, 12120, 12188, 12243, 12318, 12394],
[11264],
[10228, 10305, 10373, 10440, 10503, 10541, 10582, 10642, 10712, 10780, 10853, 10919, 10987, 11055, 11128, 11194, 11246, 11334, 11359, 11415, 11557, 11607, 11663, 11694, 11734, 12036, 12086, 12144, 12251, 12292, 12358, 12428],
[7622],
[170, 339, 522, 691, 7239, 7410, 7574, 7741, 7895, 8047, 8215, 8392, 8548, 8691, 8859, 9029, 9194, 9362, 9509, 9666, 9824, 10021, 10203, 10390, 10530, 10710, 10880, 11248, 11546, 11823, 11980, 12162],
[6548],
[6548, 8005, 8818, 9218, 9504, 9675, 9805, 9890, 10054, 10163, 10268, 10353, 10452, 10535, 10647, 10739, 10823, 10998, 11103, 11188, 11284, 11375, 11470, 11558, 11649, 11743, 11844, 11929, 12028, 12116, 12209, 12298],
[5167, 5428, 5695, 5953, 6236, 6525, 6773, 7015, 7180, 7496, 7821, 8052, 8238, 8401, 8601, 8962, 9154, 9339, 9514, 9722, 9929, 10114, 10302, 10507, 10866, 11061, 11237, 11433, 11653, 11849, 12061, 12259],
[895, 1231, 1555, 1964, 2342, 2550, 2761, 3133, 3349, 3550, 3920, 4327, 4701, 5095, 5497, 5867, 6269, 6648, 7037, 7444, 7847, 8257, 8610, 9006, 9384, 9764, 10151, 10528, 10920, 11327, 11681, 12065],
[],
[],
[],
[],
[],
[],
[796, 1185, 1584, 1947, 2340, 2729, 3108, 3499, 3895, 4273, 4683, 5058, 5440, 5831, 6234, 6599, 7001, 7210, 7404, 7788, 8183, 8575, 8974, 9340, 9711, 10104, 10500, 10888, 11280, 11484, 11685, 12076],
[7550, 7682, 7813, 7942, 8072, 9794, 9914, 10028, 10071, 10480, 10603, 10814, 10891, 11011, 11058, 11149, 11246, 11330, 11401, 11474, 11551, 11611, 11700, 11766, 11843, 11916, 11999, 12056, 12147, 12232, 12307, 12378],
[607, 775, 1182, 1577, 1966, 2326, 2721, 3108, 3496, 3873, 4267, 4655, 5045, 5434, 5818, 6220, 6615, 7002, 7363, 7766, 8168, 8539, 8938, 9341, 9703, 10115, 10511, 10904, 11107, 11316, 11703, 12094],
[2074]]
    f=open("ffs.txt", "r")
    vals = []
    for line in f:
        x = line.split(' ')
        for val in x:
            if len(val) < 1:
                continue
            vals.append(float(val))

    xdim = 50
    length = 12465
    for i in range(xdim):
        feature = []
        x = []
        for j in range(length):
            x.append(j)
            feature.append(vals[i * length + j])
        plt.plot(x, feature, label="f", zorder=-1)
        mmf = []
        ppf = []
        intf = []
        for b in mf[i]:
            if pf[i].__contains__(b):
                intf.append(b)
            else:
                mmf.append(b)

        for b in pf[i]:
            if not mf[i].__contains__(b):
                ppf.append(b)

        for b in mmf:
            plt.scatter(b, feature[b], s=10, c='r', zorder=1)
        for b in ppf:
            plt.scatter(b, feature[b], s=5, c='g', zorder=1)
        for b in intf:
            plt.scatter(b, feature[b], s=3, c='y', zorder=1)
        plt.savefig("f" + str(i) + ".png")
        plt.clf()

def f8():
    pf = [[2230, 2898, 3563, 4229, 6232, 7011, 7789, 11685],
[668, 4003, 4670, 7673, 8453, 9232, 10011, 11180],
]

    mf = [
[1555, 3113, 4672, 5451, 6232, 7789, 9348, 10906],
[1557, 3116, 3894, 4675, 6232, 7790, 9348, 10906],
]
    f=open("ffexample.txt", "r")
    vals = []
    for line in f:
        x = line.split(' ')
        for val in x:
            if len(val) < 1:
                continue
            vals.append(float(val))

    xdim = 2
    length = 12465
    for i in range(xdim):
        feature = []
        x = []
        for j in range(length):
            x.append(j)
            feature.append(vals[i * length + j])
        plt.plot(x, feature, label="f", zorder=-1)

        for b in mf[i]:
            plt.scatter(b, feature[b], s=10, c='r', zorder=1)
        for b in pf[i]:
            plt.scatter(b, feature[b], s=10, c='g', zorder=1)

    plt.savefig("fex.png")
        #plt.clf()

def f9():
    pf = [[2230, 2898, 3563, 4229, 6232, 7011, 7789, 11685],
[668, 4003, 4670, 7673, 8453, 9232, 10011, 11180],
]

    mf = [
[1555, 3113, 4672, 5451, 6232, 7789, 9348, 10906],
[1557, 3116, 3894, 4675, 6232, 7790, 9348, 10906],
]

    feature = []
    feature2 = []
    feature3 = []
    x = []
    length = 12465
    for j in range(length):
        x.append(j)
        feature.append(0)
        feature2.append(1)
        feature3.append(20)
    plt.plot(x, feature, label="f", zorder=-1)
    plt.plot(x, feature2, label="f2", zorder=-1)
    plt.plot(x, feature3, label="f3", zorder=-1)
    for b in mf[0]:
        plt.scatter(b, feature2[b], s=10, c='r', zorder=1)
    for b in pf[0]:
        plt.scatter(b, feature[b], s=10, c='g', zorder=1)

    for b in mf[1]:
        plt.scatter(b, feature2[b], s=10, c='r', zorder=1)
    for b in pf[1]:
        plt.scatter(b, feature[b], s=10, c='g', zorder=1)


    plt.savefig("fex2.png")
        #plt.clf()
if __name__ == "__main__":
    f9()